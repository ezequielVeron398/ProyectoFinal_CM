class Utilidad {

  Utilidad() {
  }

  public void movimientoEnemigo(PVector posInicial, PVector posFinal, float velocidad, float distanciaMinima, float deltaTime) {
    float distanciaX = posFinal.x - posInicial.x;
    float distanciaY = posFinal.y - posInicial.y;
    float distancia = sqrt(distanciaX * distanciaX + distanciaY * distanciaY);

    if (distancia > distanciaMinima) {
      float movX = distanciaX  / distancia * velocidad * deltaTime;
      float movY = distanciaY / distancia * velocidad * deltaTime;
      posInicial.x += movX;
      posInicial.y += movY;
    }
  }

  private boolean colisionRectangulos(PVector posA, float anchoA, float alturaA, PVector posB, float anchoB, float alturaB) {

    float distanciaX = posA.x - posB.x;
    float distanciaY = posA.y - posB.y;


    if (distanciaX < 0) distanciaX = -distanciaX;
    if (distanciaY < 0) distanciaY = -distanciaY;


    return distanciaX < (anchoA / 2 + anchoB / 2) &&
      distanciaY < (alturaA / 2 + alturaB / 2);
  }

  public PVector trayectoria(PVector player, PVector objetivo) {
    PVector distancia = new PVector(objetivo.x - player.x, objetivo.y - player.y);
    float hipotenusa = sqrt(distancia.x * distancia.x + distancia.y * distancia.y);
    PVector movimiento = new PVector(distancia.x/hipotenusa, distancia.y/hipotenusa);
    return  movimiento;
  }
  public float recibeDaño(float vida, float daño){
    
    
    return vida - daño;
  }
}
