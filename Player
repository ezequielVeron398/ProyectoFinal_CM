class Player extends GameObject {
  private char estado; //se usa para cambiar la visualizacion del sprite dependiendo como se mueve
  private Sprite sprite;
  private int radioCollider;
  private Arma arma;
  private float vidaJugador;
  private boolean dañoAJugador;

  public Player() {
    this.posicion = new PVector(width/2, height/2);
    this.velocidad = 100;
    this.sprite = new Sprite();
    this.estado = 'q';
    this.arma = new Arma(this.posicion);
    this.radioCollider = 12;
    this.vidaJugador = 100;
    this.dañoAJugador = false;
  }
  public PVector getPosicionPlayer() {
    return this.posicion;
  }
  public float getVidaPlayer() {
    return vidaJugador;
  }

  public void recargarBalas() {
    this.arma.generarBalas();
  }
  public void display() {
    this.sprite.displayJugador(estado, this.posicion);
  }
  public void usaArma() {
    this.arma.disparar();
  }

  public void mover(boolean arriba, boolean abajo, boolean izquierda, boolean derecha) {
    if (arriba) {
      this.posicion.y -= velocidad*deltaTime;
      this.estado = 'w';
    }
    if (abajo) {
      this.posicion.y += velocidad*deltaTime;
      this.estado = 's';
    }
    if (izquierda) {
      this.posicion.x -= velocidad*deltaTime;
      this.estado = 'a';
    }
    if (derecha) {
      this.posicion.x += velocidad*deltaTime;
      this.estado = 'd';
    }
    if (!arriba && !abajo && !izquierda && !derecha) {
      this.estado = 'q';
    }
  }

  public void colisionarJugadorBala(ArrayList<Proyectil> balasVomito) {
    for (int i = balasVomito.size() - 1; i >= 0; i--) {
      Proyectil bala = balasVomito.get(i);
      float d = bala.posicion.dist(this.posicion);

      if (d < (this.radioCollider + ((BalaVomito) bala).colliderVomito)) {

        dañoAJugador = true;

        balasVomito.remove(i);
      }
    }
  }
  public void colisionarEnemigos(ArrayList<ZombieDistancia> zombiesDistancia, ArrayList<ZombieMele> zombiesMele, ZombieJefe zombieJefe) {
    for (int i = this.arma.balasJugador.size() - 1; i >= 0; i--) {
      boolean colisiono = false;
      for (int j =0; j < zombiesDistancia.size(); j++) {
        if (arma.balasJugador.get(i).posicion.dist(zombiesDistancia.get(j).getPosicion()) < 10 + zombiesDistancia.get(j).getRadioColision()) {
          this.arma.balasJugador.remove(i);
          if (zombiesDistancia.get(j).recibeDaño()) zombiesDistancia.remove(j);
          colisiono = true;
          break;
        }
      }
      if (colisiono) continue;
      for (int j =0; j < zombiesMele.size(); j++) {
        if (arma.balasJugador.get(i).posicion.dist(zombiesMele.get(j).getPosicion()) < 10 + zombiesMele.get(j).getRadioColision()) {
          this.arma.balasJugador.remove(i);
          if (zombiesMele.get(j).recibeDaño()) zombiesMele.remove(j);
          //zombiesMele.get(j).empujar();
          colisiono = true;
          break;
        }
      }
      if (colisiono) continue;
      if (zombieJefe != null &&
        arma.balasJugador.get(i).posicion.dist(zombieJefe.getPosicion()) < 10 + zombieJefe.getRadioColision()) {

        this.arma.balasJugador.remove(i);
        if (zombieJefe.recibeDaño()) zombieJefe = null;
        break;
      }
    }
  }

  public void recibioDañoDistancia() {
    if (dañoAJugador) {

      this.vidaJugador -= Utilidad.DAÑO_VOMITO;
      this.dañoAJugador = false;
      if (vidaJugador == 0);
    }
  }
  public void recibioDañoMele(ZombieMele zombieMele) {
    int ahora = millis();
    int ultimo = zombieMele.getTiempoUltimoDañoMele();

    if (Utilidad.colisionRectangulos(
      this.posicion,
      sprite.getAnchoFrameJugador(),
      sprite.getAltoFrameJugador(),
      zombieMele.getPosicion(),
      sprite.getAnchoFrameEnemigo(),
      sprite.getAltoFrameEnemigo()
      ) && ahora - ultimo > zombieMele.getCooldownDañoMele()) {
      this.vidaJugador -= Utilidad.DAÑO_MELE;
      zombieMele.setTiempoUltimoDañoMele(ahora); 
    }
  }
  
/*   public void recibioDañoJefe(ZombieJefe zombieJefe) {
    int ahora = millis();
    int ultimo = zombieJefe.getTiempoUltimoDañoJefe();

    if (Utilidad.colisionRectangulos(
      this.posicion,
      sprite.getAnchoFrameJugador(),
      sprite.getAltoFrameJugador(),
      zombieJefe.getPosicion(),
      sprite.getAnchoFrameEnemigo(),
      sprite.getAltoFrameEnemigo()
      ) && ahora - ultimo > zombieJefe.getCooldownDañoJefe()) {
      this.vidaJugador -= Utilidad.DAÑO_JEFE;
      zombieJefe.setTiempoUltimoDañoJefe(ahora); 
    }
  }
    public void recibioDañoDistanciaJefe() {
    if (dañoAJugador) {

      this.vidaJugador -= Utilidad.DAÑO_JEFE;
      this.dañoAJugador = false;
      if (vidaJugador == 0);
    }
}*/
}
